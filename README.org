* Benj

Benj utility scripts

** R installation

Note that r-anndata must be installed for all unit tests to pass
#+BEGIN_SRC bash
## Install under current environment
make
#+END_SRC
** Python installation

#+BEGIN_SRC bash
pip install .
#+END_SRC
** Conda environments
Environments under [[conda/]] can be used. Mamba is recommended for environment creation because of the number of packages
*** rbenj
#+BEGIN_SRC bash
mamba env create --file=conda/rbenj.yml
R --slave -e 'devtools::install_github(c("GreenleafLab/ArchR", "lhe17/nebula"), ref="master", repos = BiocManager::repositories())'
make
#+END_SRC
*** pybenj
#+BEGIN_SRC bash
mamba env create --file=conda/pybenj.yml
pip install .
#+END_SRC
*** benj
#+BEGIN_SRC bash
mamba env create --file=conda/benj.yml
R --slave -e 'devtools::install_github(c("GreenleafLab/ArchR", "lhe17/nebula"), ref="master", repos = BiocManager::repositories())'
make
pip install .
#+END_SRC
* RNA integration/subtyping framework
The overall strategy is
- Load per-sample H5AD from cellranger H5, including velocyto loom. Barcodes are renamed to "Sample#barcode-1" to make multiomic ATAC+GEX analysis easier, as ArchR uses this format.
- Concatenate all H5AD, add metadata, and run scrublet to remove doublets.
- Integrate cell type iteratively
** H5AD from CellRanger RNA
From a list of sample names and filtered_feature_bc_matrix.h5 files in a file called "items.txt", you can enter a SLURM script as follows to build H5AD for each:
#+BEGIN_SRC bash
  #!/usr/bin/env bash
  #SBATCH -p kellis
  #SBATCH --array=1-106%10
  #SBATCH --nice=10000
  cd /path/to/items/dir
  export SAMPLE=$(< "items.txt" awk -v TASK=${SLURM_ARRAY_TASK_ID} 'NR == TASK { print $1 }')
  export H5=$(< "items.txt" awk -v TASK=${SLURM_ARRAY_TASK_ID} 'NR == TASK { print $2 }')
  export OUTPUT="${SAMPLE}.h5ad"
  if [ -f "${OUTPUT}" ]; then
      echo "File ${OUTPUT} already created."
  else
      module load lmod-conda
      conda activate pybenj
      `type -P time` h5ad_from_cellranger_rna.py --h5 "${H5}" --sample "${SAMPLE}" --output "${OUTPUT}"
  fi
#+END_SRC
** Aggregation from list of H5AD and sample metadata
Now is when sample metadata is included. For every sample in metadata index, the H5AD is read in from the directory.
#+BEGIN_SRC bash
aggregate_anndata.py --metadata /path/to/md.tsv -d /path/to/h5ad/dir/ -o concatenated.h5ad
#+END_SRC
** Integration process
#+BEGIN_SRC bash
      function integrate {
	  cls=${1:-overall}
	  shift
	  integrate_rna.py -i concatenated.h5ad \
			   -o "${cls}/${cls}.h5ad" \
			   -t "${cls}/${cls}_clust.tsv.gz" \
			   -f "${cls}" \
			   -b "batch" \
			   -l "${cls}_clust" \
			   --hvg 5000 \
			   --dotplot Mbp Pdgfra Aif1 Gfap Flt1 Pdgfrb Syt1 Slc17a7 Gad1 \
			   "$@"
      }
      integrate overall
      integrate exc -a ./overall_clust/overall_clust.tsv.gz --subset overall_clust=C1,C2,C3 --plot overall_clust
      integrate exc_L23 -a ./exc_clust/exc_clust.tsv.gz --subset exc_clust=C0,C2,C3 --plot overall_clust exc_clust

#+END_SRC
* ATAC integration
The ATAC integration pipeline is very similar to the RNA integration pipeline.

As a brief overview, this pipeline uses both ArchR and muon. ArchR is currently better at QC, peaks, and motifs, and muon is better at primary analysis (cell types, UMAPs, multiomics).

So, the same barcodes (ArchR format, "Sample#barcode-1") is used to ensure no mixup.

The steps consist of:
** Create initial arrow files in R, and add ArchR metadata:
#+BEGIN_SRC R
  library(ArchR)
  addArchRGenome("hg38")
  geneAnnotation = benj::createGeneAnnotationGFF("/path/to/cellranger/refdata/genes/genes.gtf", OrgDb=org.Hs.eg.db::org.Hs.eg.db, dataSource="cellranger", organism="Homo sapiens")
  ArrowFiles=createArrowFiles(..., geneAnnotation=geneAnnotation)
  proj = createArchRProject(ArrowFiles, outputDirectory="ArchR", geneAnnotation=geneAnnotation)
  gzf = gzfile("ArchR_metadata.tsv.gz", "w")
  write.table(as.data.frame(proj@cellColData), gzf, sep="\t")
  close(gzf)
  saveArchRProject(proj, "ArchR")
#+END_SRC
** Use muon to count fragments using a peak set
#+BEGIN_SRC bash
  #!/usr/bin/env bash
  #SBATCH -p kellis
  #SBATCH --array=1-106%10
  #SBATCH --nice=10000
  cd /home/benjames/data/SCORCH/1.Mash_BA9_NAc/ATAC
  export SAMPLE=$(< "items.txt" awk -v TASK=${SLURM_ARRAY_TASK_ID} 'NR == TASK { print $1 }')
  export FRAG=$(< "items.txt" awk -v TASK=${SLURM_ARRAY_TASK_ID} 'NR == TASK { print $2 }')
  export META="/path/to/archr_annotation.tsv.gz"
  export PEAKS="/path/to/atac_peak_annotation.tsv.gz"
  export OUTPUT="${SAMPLE}.h5ad"
  if [ -f "${OUTPUT}" ]; then
      echo "File ${OUTPUT} already exists"
  else
      module load lmod-conda
      conda activate pybenj
      `type -P time` h5ad_from_archr_annotation.py --fragments "${FRAG}" --sample "${SAMPLE}" --cell-metadata "${META}" --peaks "${PEAKS}" --output "${OUTPUT}"
  fi
#+END_SRC
** Aggregation from a list of H5AD and sample metadata
Now is when sample metadata is included. For every sample in metadata index, the H5AD is read in from the directory.
#+BEGIN_SRC bash
aggregate_anndata.py --metadata /path/to/md.tsv -d /path/to/h5ad/dir/ -o concatenated.h5ad
#+END_SRC
** Integration process
Very similar to RNA integration process. But, use sample level batch correction.
#+BEGIN_SRC bash
      function integrate {
	  cls=${1:-overall}
	  shift
	  integrate_atac.py -i concatenated.h5ad \
			   -o "${cls}/${cls}.h5ad" \
			   -t "${cls}/${cls}_clust.tsv.gz" \
			   -f "${cls}" \
			   -b "Sample" \
			   -l "${cls}_clust" \
			   "$@"
      }
      integrate overall
      integrate exc -a ./overall_clust/overall_clust.tsv.gz --subset overall_clust=C1,C2,C3 --plot overall_clust
      integrate exc_L23 -a ./exc_clust/exc_clust.tsv.gz --subset exc_clust=C0,C2,C3 --plot overall_clust exc_clust
#+END_SRC bash
** Subtype peaks/overall re-done peaks
From the integrated ATAC, load in the =*_clust.tsv.gz= files, and addGroupCoverages in ArchR, then call new peaks.
Then, you can iteratively improve the integration.
* Multiome workflow
- Currently, you should process 1) RNA first, using RNA subtyping framework.
- Then, process ATAC alone as single-omic. But, in the integrate() function, add an annotation for the
* LMod modules
To use, in your =~/.bash_profile=, put
#+BEGIN_SRC bash
module use /path/to/this/repo/modules
#+END_SRC
and re-login to view changes.

** Conda integration is at [[modules/lmod-conda]]
To change the default Conda root directory, replace =~/data/miniconda3= with your conda root directory.

** Genome files
*** ENCODE Exclusion list regions
| Genome | URL                                                                           |
|--------+-------------------------------------------------------------------------------|
| hg19   | https://www.encodeproject.org/files/ENCFF001TDO/@@download/ENCFF001TDO.bed.gz |
| hg38   | https://www.encodeproject.org/files/ENCFF356LFX/@@download/ENCFF356LFX.bed.gz |
| mm10   | https://www.encodeproject.org/files/ENCFF547MET/@@download/ENCFF547MET.bed.gz |

*** GENCODE GTF
| Genome     | URL                                                                                                                     |
|------------+-------------------------------------------------------------------------------------------------------------------------|
| hg38 GTF   | https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_43/gencode.v43.annotation.gtf.gz                      |
| hg19 GTF   | https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_43/GRCh37_mapping/gencode.v43lift37.annotation.gtf.gz |
| GRCm39 GTF | https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_mouse/release_M32/gencode.vM32.annotation.gtf.gz                    |
*** 10X references
- https://support.10xgenomics.com/single-cell-multiome-atac-gex/software/downloads/latest
- https://support.10xgenomics.com/single-cell-gene-expression/software/downloads/latest
- https://support.10xgenomics.com/single-cell-atac/software/downloads/latest
*** RepeatMasker
Download from https://genome.ucsc.edu/cgi-bin/hgTables
* Datasets
| Link                                                                                                                                    | MD5sum                           |
|-----------------------------------------------------------------------------------------------------------------------------------------+----------------------------------|
| https://cf.10xgenomics.com/samples/cell-arc/2.0.0/pbmc_granulocyte_sorted_10k/pbmc_granulocyte_sorted_10k_filtered_feature_bc_matrix.h5 | df86844b99161b9487090d91e644745e |
| https://cf.10xgenomics.com/samples/cell-arc/2.0.0/pbmc_granulocyte_sorted_10k/pbmc_granulocyte_sorted_10k_atac_fragments.tsv.gz         | 7635e27373de5dabd5b54ad58a30bc61 |
| https://cf.10xgenomics.com/samples/cell-arc/2.0.0/pbmc_granulocyte_sorted_10k/pbmc_granulocyte_sorted_10k_atac_fragments.tsv.gz.tbi     | 134a3ca2dc01c398a2905504bd6384f7 |
| https://cf.10xgenomics.com/samples/cell-arc/2.0.0/pbmc_granulocyte_sorted_10k/pbmc_granulocyte_sorted_10k_atac_peak_annotation.tsv      | 38f8abd2ba764e9693869e0111ad7a59 |
| https://cf.10xgenomics.com/samples/cell-arc/2.0.0/human_brain_3k/human_brain_3k_filtered_feature_bc_matrix.h5                           | ba0b765eddb138d6d6294227879b9a9b |
| https://cf.10xgenomics.com/samples/cell-arc/2.0.0/human_brain_3k/human_brain_3k_atac_fragments.tsv.gz                                   | b1594a4096405128e646e6a275e3ada3 |
| https://cf.10xgenomics.com/samples/cell-arc/2.0.0/human_brain_3k/human_brain_3k_atac_fragments.tsv.gz.tbi                               | 3054c179689ff025f9e64df6d7a79040 |
| https://cf.10xgenomics.com/samples/cell-arc/2.0.0/human_brain_3k/human_brain_3k_atac_peak_annotation.tsv                                | 5c9cde0442444bbc2c4c57c577db6c80 |
